{
  "articles": [
    {
      "path": "about.html",
      "title": "Joohan Cho",
      "author": [],
      "contents": "\n\n          \n          \n          Homepage\n          \n          \n          Home\n          About\n          Portfolio\n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Joohan Cho\n            \n            \n              \n                \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            My name is Joohan Cho and I am an actuarial science major at Sunkyunkwan University. I have lived in Seoul. Basically, I always love challenging new things and easily adjust my self to new environments. Thank you for reading and have a good day!!\n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Joohan Cho\n            \n            \n              \n                \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              My name is Joohan Cho and I am an actuarial science major at Sunkyunkwan University. I have lived in Seoul. Basically, I always love challenging new things and easily adjust my self to new environments. Thank you for reading and have a good day!!\n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-03-02T12:14:51+00:00"
    },
    {
      "path": "index.html",
      "title": "Joohan Cho",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-03-02T12:25:47+00:00"
    },
    {
      "path": "port.html",
      "title": "Portfolio",
      "author": [],
      "contents": "\n목차\nSimulate Vasicek r(t)\nPricing Barrier option\nAmeshousing\nSimulate Vasicek r(t)\n\n\n## Simulate Vasicek r(t)\nset.seed(3)\n\n# parameter 설정\nr0 <- 0.03\na <- 0.2\nb <- 0.03\nsigma <- 0.01\nn <- 10    # trials\nT <- 10    # (10년만기 국고채)\nh <- 3600    # subintervals\ndt <- T/h   \n\n\n# 시나리오 행렬 생성\nv_m <- as.data.frame(matrix(data=0, ncol = 21, nrow = h+1)) \nv_m[1,1:10] <- r0\ncolnames(v_m)=c(\"scenario1\",\"scenario2\",\"scenario3\",\"scenario4\",\"scenario5\",\n                \"scenario6\",\"scenario7\",\"scenario8\",\"scenario9\",\"scenario10\", \n                \"price1\", \"price2\", \"price3\", \"price4\", \"price5\",\n                \"price6\", \"price7\", \"price8\", \"price9\", \"price10\",\"t\")\n\nfor(j in 1:n){\n  for(i in 2:(h+1)){\n    dr <- a*(b-v_m[i-1,j])*dt + sigma*sqrt(dt)*rnorm(1,0,1)   # dr = a(b-r)dt + sigma*dz, where dz~N(0,dt) > using normal approximation\n    v_m[i,j] <- v_m[i-1,j] + dr   # r(t)\n  }\n} \n\nv_m[,21] <- seq(0, 3600)\nv_m[,21] <- v_m[,21]/3600\n\n\n# plot r(t)\nt <- seq(0, T, dt)\nmatplot(t, v_m[,1:10], type=\"l\", lty=3, col = 1:10, main=\"Short-Rate Paths\", ylab=\"r(t)\") \n\n\n\n# pricing bond\nBondprice <- function(rt, a, b, sigma, k){\n    rbar <- b-(0.5*sigma^2/a^2)  # k= T-t\n    b.t <- (1/a)*(1-exp(-k*a))   # B(t,T) \n    a.t <- exp(rbar*(b.t-k)-(b.t^2*sigma^2/(4*a)))   # A(t,T)\n    return(a.t*exp(-b.t*rt))\n  }\n\nfor (i in 1:h+1){\n  for (j in 1:n){\n    v_m[i,j+10] <- Bondprice(v_m[i,j], a, b, sigma, v_m[i,21])  \n  }\n  \n}\n\nv_mp <- v_m[-1,]\n\nmatplot(seq(1/3600,T,dt), v_mp[,11:20], type=\"l\", lty=1, col = 1:10, main=\"Bond price\", ylab=\"P(t,T)\", xlab = \"maturity\")\n\n\n\n\nPricing Barrier option\n\n\n# Assumptions\n\nscenario <- 100\ninterval <- 600\nt <- 1/(interval)\nr <- 0.03\nsigma <-0.4\nmu <- r-0.5*sigma^2\n\ns0 <- 100\nk <- 110\nbarrier <- 120\nset.seed(123)\n\n\n# Z\n\nz <- as.data.frame(matrix(rnorm(scenario*interval), nrow=scenario, ncol=interval))\n\nxx <- as.data.frame(matrix(data=0, nrow=scenario, ncol=interval+1))\n\nfor (i in 1:scenario){\n  for(j in 1:interval){\n    xx[i,j+1] <- xx[i,j] + (mu*t+(sigma*sqrt(t)*z[i,j]))\n  }\n}\n\n\nplot(x=seq(1, 600, 1),y=s0*exp(xx[3,2:601]), main = \"X(T)\", type = \"l\", ylab=\"X(t)\", xlab=\"interval\")\n\n\n\n## Payoff 식 만들어야함\n\nresult <- matrix(NA, scenario, 1)\n\nfor(i in 1:scenario){\n  result[i,1]<- exp(-r*1)*(s0*exp(xx[i,601])-k)  \n}\n\n\nmean(result[1:scenario,1])\n\n\n[1] -7.071878\n\nAmeshousing\n\n\nlibrary(ggplot2)\nlibrary(AmesHousing)\nlibrary(tidyverse)\nlibrary(caret)\nlibrary(GGally)\nlibrary(treemap)\nlibrary(ggridges)\n\nhouse <- ames_raw\n\n# Continuous variables\n## SalePrice graph\n\n### divde data into 30 equal bins or intervals.\n\nggplot(house, aes(SalePrice)) + geom_histogram()\n\n\n\nboxplot(house$SalePrice, main = \"SalePrice\")\n\n\n\n### width : 5000, count the number of data\n\nhouse %>%\n  count(cut_width(SalePrice, width = 5000)) %>%\n  arrange(desc(n))\n\n\n# A tibble: 106 x 2\n   `cut_width(SalePrice, width = 5000)`     n\n   <fct>                                <int>\n 1 (1.28e+05,1.32e+05]                    137\n 2 (1.42e+05,1.48e+05]                    130\n 3 (1.32e+05,1.38e+05]                    125\n 4 (1.38e+05,1.42e+05]                    125\n 5 (1.22e+05,1.28e+05]                    118\n 6 (1.52e+05,1.58e+05]                    103\n 7 (1.48e+05,1.52e+05]                    101\n 8 (1.18e+05,1.22e+05]                     99\n 9 (1.58e+05,1.62e+05]                     92\n10 (1.72e+05,1.78e+05]                     92\n# … with 96 more rows\n\n### log transformed histogram\n\nggplot(house, aes(SalePrice)) +\n  geom_histogram(bins = 50) +\n  scale_x_log10(\n    labels = scales::dollar,\n    breaks = c(50000, 150000, 250000, 350000)\n  )\n\n\n\n### look at normality by using Q-Q plot\n\n### raw data\n\nqqnorm(house$SalePrice, main = \"raw data Q-Q plot\")\nqqline(house$SalePrice)\n\n\n\n### log data\n\nqqnorm(log(house$SalePrice), main = \"log data Q-Q plot\")\nqqline(log(house$SalePrice))\n\n\n\n### plot\n\nplot(house$SalePrice, col = rgb(0.5, 0, 0.5, alpha = 0.3), ylab = \"SalePrice\")\n\n\n\n## Total square feet of basement area\n\n### graph `Total Bsmt SF`\n\nggplot(house, aes(`Total Bsmt SF`)) + geom_histogram()\n\n\n\nboxplot(house$`Total Bsmt SF`, main = \"Total Bsmt SF\", na.rm = TRUE)\n\n\n\n# Bar charts : One of the most commonly used data visualizations for categorical variables\n# MS_Zoning\nggplot(house, aes(`MS Zoning`)) + geom_bar()\n\n\n\n# total count\np1 <- house %>%\n  count(`MS Zoning`) %>%\n  ggplot(aes(reorder(`MS Zoning`, n), n)) + geom_col() + coord_flip() + ggtitle(\"Total count\")\n\n# percent of whole\np2 <- house %>%\n  count(`MS Zoning`) %>%\n  mutate(pct = n / sum(n)) %>%\n  ggplot(aes(reorder(`MS Zoning`, pct), pct)) + geom_col() + coord_flip() + ggtitle(\"Percent of whole\")\n\ngridExtra::grid.arrange(p1, p2, nrow =1)\n\n\n\n# n\nhouse %>%\n  count(`MS Zoning`) %>%\n  mutate(pct = n / sum(n)) %>%\n  arrange(pct)  # This imbalanced nature can cause problems in future analytic models.\n\n\n# A tibble: 7 x 3\n  `MS Zoning`     n      pct\n  <chr>       <int>    <dbl>\n1 A (agr)         2 0.000683\n2 I (all)         2 0.000683\n3 C (all)        25 0.00853 \n4 RH             27 0.00922 \n5 FV            139 0.0474  \n6 RM            462 0.158   \n7 RL           2273 0.776   \n\n                # So it may make sense to combine these infrequent levels into an \"other\" category.\n\n\n# make \"other\" category to MS Zoning\nhouse %>%\n  mutate(`MS Zoning` = fct_lump(`MS Zoning`, n = 2)) %>%  # 주요 인자 n개만 나타내고 나머지는 other 처리\n  count(`MS Zoning`) %>%\n  mutate(pct = n / sum(n)) %>%\n  ggplot(aes(reorder(`MS Zoning`, pct), pct)) + geom_col() + coord_flip()\n\n\n\nhouse %>%\n  mutate(Neighborhood = fct_lump(Neighborhood, n = 26)) %>%\n  count(Neighborhood) %>%\n  mutate(pct = n / sum(n)) %>%\n  ggplot(aes(pct, reorder(Neighborhood, pct))) + geom_point() +\n  geom_segment(aes(x = 0, xend = pct, y = Neighborhood, yend = Neighborhood), size = 0.3)\n\n\n\n# order variable (kitchenQual)\nhouse %>%\n  mutate(`Kitchen Qual` = fct_relevel(`Kitchen Qual`, \"Po\", \"Fa\", \"TA\", \"Gd\")) %>%\n  ggplot(aes(`Kitchen Qual`)) + geom_bar()\n\n\n\n# categorial variable that has set intervals and may even be identified by integer values.\np <-  ggplot(house, aes(factor(`Mo Sold`))) + geom_bar()\np <- p + labs(x = \"sold month\", y = \"frequency\")\np\n\n\n\n# Year Built\nggplot(house, aes(`Year Built`)) + geom_histogram()\n\n\n\nhouse %>%\n  count(cut_width(`Year Built`, width = 10)) %>%  # interval : 10-year\n  arrange(desc(n))\n\n\n# A tibble: 15 x 2\n   `cut_width(\\`Year Built\\`, width = 10)`     n\n   <fct>                                   <int>\n 1 (1995,2005]                               627\n 2 (1955,1965]                               373\n 3 (1965,1975]                               339\n 4 (2005,2015]                               324\n 5 (1975,1985]                               252\n 6 (1945,1955]                               246\n 7 (1985,1995]                               208\n 8 (1915,1925]                               179\n 9 (1935,1945]                               133\n10 (1925,1935]                               101\n11 (1905,1915]                                86\n12 (1895,1905]                                38\n13 (1885,1895]                                13\n14 (1875,1885]                                 9\n15 [1865,1875]                                 2\n\nggplot(house, aes(`Year Built`)) +\n  geom_histogram(breaks = seq(1865, 2005, by = 5)) + \n  geom_vline(xintercept = c(1980, 1990), col = \"red\", lty = \"dashed\")\n\n\n\n# One of the most popular plots to assess association is the scatter plot.\n# `Gr Liv Area` & SalePrice\nggplot(house, aes(x = `Gr Liv Area`, y = SalePrice)) + geom_point(alpha = .3)\n\n\n\np1 <- ggplot(house, aes(x = `Gr Liv Area`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + ggtitle(\"raw data variables\") +\n  geom_text(x=4500, y=500000, label=\"y=111.694x+13289.634\") + \n  geom_text(x=4500, y=450000, label=\"R²=0.4995\")\np1\n\n\n\np2 <- ggplot(house, aes(x = `Gr Liv Area`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + \n  scale_x_log10() + scale_y_log10() + ggtitle(\"log data variables\") +\n  geom_text(x=1000, y=30000, label=\"y=0.90781x+2.35830\") + \n  geom_text(x=3000, y=30000, label=\"R²=0.523\") \np2\n\n\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n\n\n\n# `Total Bsmt SF` & SalePrice\n\np1 <- ggplot(house, aes(x = `Total Bsmt SF`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + ggtitle(\"raw data variables\")\np1\n\n\n\np2 <- ggplot(house, aes(x = `Total Bsmt SF`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + \n  scale_x_log10() + scale_y_log10() + ggtitle(\"log data variables\")\np2\n\n\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n\n\n\n# `Misc Val` & SalePrice > no correlation?\np1 <- ggplot(house, aes(x = `Misc Val`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + ggtitle(\"raw data variables\")\np1\n\n\n\np2 <- ggplot(house, aes(x = `Misc Val`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + \n  scale_x_log10() + scale_y_log10() + ggtitle(\"log data variables\")\np2\n\n\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n\n\n\n# `Year Built` & SalePrice\nplot(house$`Year Built`, house$SalePrice)\n\n\n\np1 <- ggplot(house, aes(x = `Year Built`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + ggtitle(\"raw data variables\")\np1\n\n\n\np2 <- ggplot(house, aes(x = `Year Built`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + \n  scale_x_log10() + scale_y_log10() + ggtitle(\"log data variables\")\np2\n\n\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n\n\n\n# `Pool Area` & SalePrice\n\np1 <- ggplot(house, aes(x = `Pool Area`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + ggtitle(\"raw data variables\")\np1\n\n\n\np2 <- ggplot(house, aes(x = `Pool Area`, y = SalePrice)) + geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", lty = \"dashed\") + \n  geom_smooth(se = TRUE, lty = \"dashed\") + \n  scale_x_log10() + scale_y_log10() + ggtitle(\"log data variables\")\np2\n\n\n\ngridExtra::grid.arrange(p1, p2, ncol = 2)\n\n\n\n# `MS Zoning` & SalePrice\nx1 <- ggplot(house, aes(x = factor(`Bedroom AbvGr`), y = SalePrice)) +\n  geom_jitter(alpha = .2, width = .1)\nx1\n\n\n\n# `Lot Shape` & SalePrice\nx2 <- ggplot(house, aes(x = factor(`Lot Shape`), y = SalePrice)) +\n  geom_jitter(alpha = .2, width = .1)\nx2\n\n\n\n# `Land Contour` & SalePrice\nx3 <- ggplot(house, aes(x = factor(`Land Contour`), y = SalePrice)) +\n  geom_jitter(alpha = .2, width = .1)\nx3\n\n\n\nggplot(house, aes(x = SalePrice, y = `Neighborhood`)) + \n  ggridges::geom_density_ridges() +\n  scale_x_continuous(labels = scales::dollar)\n\n\n\n\n\n\n\n",
      "last_modified": "2021-03-09T13:09:22+00:00"
    }
  ],
  "collections": []
}
